/*
 * FTS API
 *
 * This is FTS(Funds Transfer Service) server API document.
 *
 * API version: 1.0
 * Contact: dickrj@163.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"errors"
	"io/ioutil"

	//"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TransactionApiService service

/*
TransactionApiService Get transactions
Search transactions based on query parameters
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name Account user name
 * @param optional nil or *AuthTransactionGetOpts - Optional Parameters:
     * @param "Type_" (optional.Int32) -  Outgoing(0)/Incoming(1)/Both(2) transactions for the account
     * @param "Start" (optional.String) -  The start of the query time range, format like this: 2006-01-02 15:04:05
     * @param "End" (optional.String) -  The end of the query time range, format like this: 2006-01-02 15:04:05

@return TransactionTransaction
*/

type AuthTransactionGetOpts struct {
	Type_ optional.Int32
	Start optional.String
	End   optional.String
}

func (a *TransactionApiService) AuthTransactionGet(ctx context.Context, name string, localVarOptionals *AuthTransactionGetOpts) ([]TransactionTransaction, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []TransactionTransaction
		code                int
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/auth/transaction"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("name", parameterToString(name, ""))
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Start.IsSet() {
		localVarQueryParams.Add("start", parameterToString(localVarOptionals.Start.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.End.IsSet() {
		localVarQueryParams.Add("end", parameterToString(localVarOptionals.End.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if key, ok := ctx.Value(ContextAPIKey).(string); ok {
			localVarHeaderParams["token"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	code = localVarHttpResponse.StatusCode
	if code == 200 {
		var v []TransactionTransaction
		err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, err
		}
		return v, nil
	}

	if code == 400 || code == 401 || code == 404 || code == 500 {
		var v UtilsHttpError
		err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, err
		}
		return localVarReturnValue, errors.New(v.Message)
	}

	return localVarReturnValue, nil
}

/*
TransactionApiService Create an transaction
Transfer money from one account to another
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param transaction JSON structure

@return TransactionTransaction
*/
func (a *TransactionApiService) AuthTransactionPost(ctx context.Context, transaction TransactionTransaction) (TransactionTransaction, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TransactionTransaction
		code                int
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/auth/transaction"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &transaction
	if ctx != nil {
		// API Key Authentication
		if key, ok := ctx.Value(ContextAPIKey).(string); ok {
			localVarHeaderParams["token"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	code = localVarHttpResponse.StatusCode
	if code == 200 {
		var v TransactionTransaction
		err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, err
		}
		return v, nil
	}

	if code == 400 || code == 401 || code == 403 || code == 404 || code == 500 {
		var v UtilsHttpError
		err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err != nil {
			return localVarReturnValue, err
		}
		return localVarReturnValue, errors.New(v.Message)
	}

	return localVarReturnValue, nil
}
